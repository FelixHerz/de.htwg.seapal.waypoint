/*
* generated by Xtext
*/
grammar InternalWaypoint;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.htwg.seapal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.htwg.seapal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.htwg.seapal.services.WaypointGrammarAccess;

}

@parser::members {

 	private WaypointGrammarAccess grammarAccess;
 	
    public InternalWaypointParser(TokenStream input, WaypointGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Waypoint";	
   	}
   	
   	@Override
   	protected WaypointGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleWaypoint
entryRuleWaypoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWaypointRule()); }
	 iv_ruleWaypoint=ruleWaypoint 
	 { $current=$iv_ruleWaypoint.current; } 
	 EOF 
;

// Rule Waypoint
ruleWaypoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='WAYPOINT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWaypointAccess().getWAYPOINTKeyword_0());
    }
(
(
		lv_waypoint_1_0=RULE_STRING
		{
			newLeafNode(lv_waypoint_1_0, grammarAccess.getWaypointAccess().getWaypointSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"waypoint",
        		lv_waypoint_1_0, 
        		"STRING");
	    }

)
)(
(
		lv_position_2_0=RULE_STRING
		{
			newLeafNode(lv_position_2_0, grammarAccess.getWaypointAccess().getPositionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"position",
        		lv_position_2_0, 
        		"STRING");
	    }

)
)(
(
		lv_note_3_0=RULE_STRING
		{
			newLeafNode(lv_note_3_0, grammarAccess.getWaypointAccess().getNoteSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"note",
        		lv_note_3_0, 
        		"STRING");
	    }

)
)(
(
		lv_btm_4_0=RULE_STRING
		{
			newLeafNode(lv_btm_4_0, grammarAccess.getWaypointAccess().getBtmSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"btm",
        		lv_btm_4_0, 
        		"STRING");
	    }

)
)(
(
		lv_dtm_5_0=RULE_STRING
		{
			newLeafNode(lv_dtm_5_0, grammarAccess.getWaypointAccess().getDtmSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dtm",
        		lv_dtm_5_0, 
        		"STRING");
	    }

)
)(
(
		lv_cog_6_0=RULE_STRING
		{
			newLeafNode(lv_cog_6_0, grammarAccess.getWaypointAccess().getCogSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"cog",
        		lv_cog_6_0, 
        		"STRING");
	    }

)
)(
(
		lv_sog_7_0=RULE_STRING
		{
			newLeafNode(lv_sog_7_0, grammarAccess.getWaypointAccess().getSogSTRINGTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sog",
        		lv_sog_7_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWaypointAccess().getManeuverManeuverEnumRuleCall_8_0()); 
	    }
		lv_maneuver_8_0=ruleManeuver		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaypointRule());
	        }
       		set(
       			$current, 
       			"maneuver",
        		lv_maneuver_8_0, 
        		"Maneuver");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWaypointAccess().getForesailForesailEnumRuleCall_9_0()); 
	    }
		lv_foresail_9_0=ruleForesail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaypointRule());
	        }
       		set(
       			$current, 
       			"foresail",
        		lv_foresail_9_0, 
        		"Foresail");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWaypointAccess().getMainsailMainsailEnumRuleCall_10_0()); 
	    }
		lv_mainsail_10_0=ruleMainsail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaypointRule());
	        }
       		set(
       			$current, 
       			"mainsail",
        		lv_mainsail_10_0, 
        		"Mainsail");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule Maneuver
ruleManeuver returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getManeuverAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getManeuverAccess().getNONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Tack' 
	{
        $current = grammarAccess.getManeuverAccess().getTACKEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getManeuverAccess().getTACKEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Jibe' 
	{
        $current = grammarAccess.getManeuverAccess().getJIBEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getManeuverAccess().getJIBEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Layto' 
	{
        $current = grammarAccess.getManeuverAccess().getLAYTOEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getManeuverAccess().getLAYTOEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Set Sails' 
	{
        $current = grammarAccess.getManeuverAccess().getSETSAILSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getManeuverAccess().getSETSAILSEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Change Sails' 
	{
        $current = grammarAccess.getManeuverAccess().getCHANGESAILSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getManeuverAccess().getCHANGESAILSEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Sails Down' 
	{
        $current = grammarAccess.getManeuverAccess().getSAILSDOWNEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getManeuverAccess().getSAILSDOWNEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Reff' 
	{
        $current = grammarAccess.getManeuverAccess().getREFFEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getManeuverAccess().getREFFEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='Anker Up' 
	{
        $current = grammarAccess.getManeuverAccess().getANKERUPEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getManeuverAccess().getANKERUPEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='Anker Down' 
	{
        $current = grammarAccess.getManeuverAccess().getANKERDOWNEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getManeuverAccess().getANKERDOWNEnumLiteralDeclaration_9()); 
    }
));



// Rule Foresail
ruleForesail returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getForesailAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getForesailAccess().getNONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Genua1' 
	{
        $current = grammarAccess.getForesailAccess().getGENUA1EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getForesailAccess().getGENUA1EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Genua2' 
	{
        $current = grammarAccess.getForesailAccess().getGENUA2EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getForesailAccess().getGENUA2EnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Genua3' 
	{
        $current = grammarAccess.getForesailAccess().getGENUA3EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getForesailAccess().getGENUA3EnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Fock' 
	{
        $current = grammarAccess.getForesailAccess().getFOCKEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getForesailAccess().getFOCKEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Storm Fock' 
	{
        $current = grammarAccess.getForesailAccess().getSTORMFOCKEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getForesailAccess().getSTORMFOCKEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Bister' 
	{
        $current = grammarAccess.getForesailAccess().getBISTEREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getForesailAccess().getBISTEREnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Spinacker' 
	{
        $current = grammarAccess.getForesailAccess().getSPINACKEREnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getForesailAccess().getSPINACKEREnumLiteralDeclaration_7()); 
    }
));



// Rule Mainsail
ruleMainsail returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getMainsailAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMainsailAccess().getNONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='full' 
	{
        $current = grammarAccess.getMainsailAccess().getFULLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMainsailAccess().getFULLEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Reef1' 
	{
        $current = grammarAccess.getMainsailAccess().getREEF1EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMainsailAccess().getREEF1EnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Reef2' 
	{
        $current = grammarAccess.getMainsailAccess().getREEF2EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMainsailAccess().getREEF2EnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


