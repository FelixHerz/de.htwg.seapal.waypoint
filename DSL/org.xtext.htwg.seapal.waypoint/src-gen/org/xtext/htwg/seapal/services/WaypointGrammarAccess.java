/*
* generated by Xtext
*/
package org.xtext.htwg.seapal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WaypointGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WaypointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Waypoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWAYPOINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWaypointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWaypointSTRINGTerminalRuleCall_1_0 = (RuleCall)cWaypointAssignment_1.eContents().get(0);
		private final Assignment cPositionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPositionSTRINGTerminalRuleCall_2_0 = (RuleCall)cPositionAssignment_2.eContents().get(0);
		private final Assignment cNoteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNoteSTRINGTerminalRuleCall_3_0 = (RuleCall)cNoteAssignment_3.eContents().get(0);
		private final Assignment cBtmAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBtmSTRINGTerminalRuleCall_4_0 = (RuleCall)cBtmAssignment_4.eContents().get(0);
		private final Assignment cDtmAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDtmSTRINGTerminalRuleCall_5_0 = (RuleCall)cDtmAssignment_5.eContents().get(0);
		private final Assignment cCogAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCogSTRINGTerminalRuleCall_6_0 = (RuleCall)cCogAssignment_6.eContents().get(0);
		private final Assignment cSogAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSogSTRINGTerminalRuleCall_7_0 = (RuleCall)cSogAssignment_7.eContents().get(0);
		private final Assignment cManeuverAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cManeuverManeuverEnumRuleCall_8_0 = (RuleCall)cManeuverAssignment_8.eContents().get(0);
		private final Assignment cForesailAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cForesailForesailEnumRuleCall_9_0 = (RuleCall)cForesailAssignment_9.eContents().get(0);
		private final Assignment cMainsailAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMainsailMainsailEnumRuleCall_10_0 = (RuleCall)cMainsailAssignment_10.eContents().get(0);
		
		//Waypoint:
		//
		//	"WAYPOINT" waypoint=STRING position=STRING note=STRING btm=STRING dtm=STRING cog=STRING sog=STRING maneuver=Maneuver
		//
		//	foresail=Foresail mainsail=Mainsail;
		public ParserRule getRule() { return rule; }

		//"WAYPOINT" waypoint=STRING position=STRING note=STRING btm=STRING dtm=STRING cog=STRING sog=STRING maneuver=Maneuver
		//
		//foresail=Foresail mainsail=Mainsail
		public Group getGroup() { return cGroup; }

		//"WAYPOINT"
		public Keyword getWAYPOINTKeyword_0() { return cWAYPOINTKeyword_0; }

		//waypoint=STRING
		public Assignment getWaypointAssignment_1() { return cWaypointAssignment_1; }

		//STRING
		public RuleCall getWaypointSTRINGTerminalRuleCall_1_0() { return cWaypointSTRINGTerminalRuleCall_1_0; }

		//position=STRING
		public Assignment getPositionAssignment_2() { return cPositionAssignment_2; }

		//STRING
		public RuleCall getPositionSTRINGTerminalRuleCall_2_0() { return cPositionSTRINGTerminalRuleCall_2_0; }

		//note=STRING
		public Assignment getNoteAssignment_3() { return cNoteAssignment_3; }

		//STRING
		public RuleCall getNoteSTRINGTerminalRuleCall_3_0() { return cNoteSTRINGTerminalRuleCall_3_0; }

		//btm=STRING
		public Assignment getBtmAssignment_4() { return cBtmAssignment_4; }

		//STRING
		public RuleCall getBtmSTRINGTerminalRuleCall_4_0() { return cBtmSTRINGTerminalRuleCall_4_0; }

		//dtm=STRING
		public Assignment getDtmAssignment_5() { return cDtmAssignment_5; }

		//STRING
		public RuleCall getDtmSTRINGTerminalRuleCall_5_0() { return cDtmSTRINGTerminalRuleCall_5_0; }

		//cog=STRING
		public Assignment getCogAssignment_6() { return cCogAssignment_6; }

		//STRING
		public RuleCall getCogSTRINGTerminalRuleCall_6_0() { return cCogSTRINGTerminalRuleCall_6_0; }

		//sog=STRING
		public Assignment getSogAssignment_7() { return cSogAssignment_7; }

		//STRING
		public RuleCall getSogSTRINGTerminalRuleCall_7_0() { return cSogSTRINGTerminalRuleCall_7_0; }

		//maneuver=Maneuver
		public Assignment getManeuverAssignment_8() { return cManeuverAssignment_8; }

		//Maneuver
		public RuleCall getManeuverManeuverEnumRuleCall_8_0() { return cManeuverManeuverEnumRuleCall_8_0; }

		//foresail=Foresail
		public Assignment getForesailAssignment_9() { return cForesailAssignment_9; }

		//Foresail
		public RuleCall getForesailForesailEnumRuleCall_9_0() { return cForesailForesailEnumRuleCall_9_0; }

		//mainsail=Mainsail
		public Assignment getMainsailAssignment_10() { return cMainsailAssignment_10; }

		//Mainsail
		public RuleCall getMainsailMainsailEnumRuleCall_10_0() { return cMainsailMainsailEnumRuleCall_10_0; }
	}
	
	
	public class ManeuverElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Maneuver");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENoneKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTACKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTACKTackKeyword_1_0 = (Keyword)cTACKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cJIBEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cJIBEJibeKeyword_2_0 = (Keyword)cJIBEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLAYTOEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLAYTOLaytoKeyword_3_0 = (Keyword)cLAYTOEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSETSAILSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSETSAILSSetSailsKeyword_4_0 = (Keyword)cSETSAILSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCHANGESAILSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCHANGESAILSChangeSailsKeyword_5_0 = (Keyword)cCHANGESAILSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSAILSDOWNEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSAILSDOWNSailsDownKeyword_6_0 = (Keyword)cSAILSDOWNEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cREFFEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cREFFReffKeyword_7_0 = (Keyword)cREFFEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cANKERUPEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cANKERUPAnkerUpKeyword_8_0 = (Keyword)cANKERUPEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cANKERDOWNEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cANKERDOWNAnkerDownKeyword_9_0 = (Keyword)cANKERDOWNEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Maneuver:
		//
		//	NONE="none" | TACK="Tack" | JIBE="Jibe" | LAYTO="Layto" | SETSAILS="Set Sails" | CHANGESAILS="Change Sails" |
		//
		//	SAILSDOWN="Sails Down" | REFF="Reff" | ANKERUP="Anker Up" | ANKERDOWN="Anker Down";
		public EnumRule getRule() { return rule; }

		//NONE="none" | TACK="Tack" | JIBE="Jibe" | LAYTO="Layto" | SETSAILS="Set Sails" | CHANGESAILS="Change Sails" |
		//
		//SAILSDOWN="Sails Down" | REFF="Reff" | ANKERUP="Anker Up" | ANKERDOWN="Anker Down"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE="none"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNONENoneKeyword_0_0() { return cNONENoneKeyword_0_0; }

		//TACK="Tack"
		public EnumLiteralDeclaration getTACKEnumLiteralDeclaration_1() { return cTACKEnumLiteralDeclaration_1; }

		//"Tack"
		public Keyword getTACKTackKeyword_1_0() { return cTACKTackKeyword_1_0; }

		//JIBE="Jibe"
		public EnumLiteralDeclaration getJIBEEnumLiteralDeclaration_2() { return cJIBEEnumLiteralDeclaration_2; }

		//"Jibe"
		public Keyword getJIBEJibeKeyword_2_0() { return cJIBEJibeKeyword_2_0; }

		//LAYTO="Layto"
		public EnumLiteralDeclaration getLAYTOEnumLiteralDeclaration_3() { return cLAYTOEnumLiteralDeclaration_3; }

		//"Layto"
		public Keyword getLAYTOLaytoKeyword_3_0() { return cLAYTOLaytoKeyword_3_0; }

		//SETSAILS="Set Sails"
		public EnumLiteralDeclaration getSETSAILSEnumLiteralDeclaration_4() { return cSETSAILSEnumLiteralDeclaration_4; }

		//"Set Sails"
		public Keyword getSETSAILSSetSailsKeyword_4_0() { return cSETSAILSSetSailsKeyword_4_0; }

		//CHANGESAILS="Change Sails"
		public EnumLiteralDeclaration getCHANGESAILSEnumLiteralDeclaration_5() { return cCHANGESAILSEnumLiteralDeclaration_5; }

		//"Change Sails"
		public Keyword getCHANGESAILSChangeSailsKeyword_5_0() { return cCHANGESAILSChangeSailsKeyword_5_0; }

		//SAILSDOWN="Sails Down"
		public EnumLiteralDeclaration getSAILSDOWNEnumLiteralDeclaration_6() { return cSAILSDOWNEnumLiteralDeclaration_6; }

		//"Sails Down"
		public Keyword getSAILSDOWNSailsDownKeyword_6_0() { return cSAILSDOWNSailsDownKeyword_6_0; }

		//REFF="Reff"
		public EnumLiteralDeclaration getREFFEnumLiteralDeclaration_7() { return cREFFEnumLiteralDeclaration_7; }

		//"Reff"
		public Keyword getREFFReffKeyword_7_0() { return cREFFReffKeyword_7_0; }

		//ANKERUP="Anker Up"
		public EnumLiteralDeclaration getANKERUPEnumLiteralDeclaration_8() { return cANKERUPEnumLiteralDeclaration_8; }

		//"Anker Up"
		public Keyword getANKERUPAnkerUpKeyword_8_0() { return cANKERUPAnkerUpKeyword_8_0; }

		//ANKERDOWN="Anker Down"
		public EnumLiteralDeclaration getANKERDOWNEnumLiteralDeclaration_9() { return cANKERDOWNEnumLiteralDeclaration_9; }

		//"Anker Down"
		public Keyword getANKERDOWNAnkerDownKeyword_9_0() { return cANKERDOWNAnkerDownKeyword_9_0; }
	}

	public class ForesailElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Foresail");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENoneKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGENUA1EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGENUA1Genua1Keyword_1_0 = (Keyword)cGENUA1EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGENUA2EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGENUA2Genua2Keyword_2_0 = (Keyword)cGENUA2EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGENUA3EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGENUA3Genua3Keyword_3_0 = (Keyword)cGENUA3EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFOCKEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFOCKFockKeyword_4_0 = (Keyword)cFOCKEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSTORMFOCKEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSTORMFOCKStormFockKeyword_5_0 = (Keyword)cSTORMFOCKEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBISTEREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBISTERBisterKeyword_6_0 = (Keyword)cBISTEREnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSPINACKEREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSPINACKERSpinackerKeyword_7_0 = (Keyword)cSPINACKEREnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Foresail:
		//
		//	NONE="none" | GENUA1="Genua1" | GENUA2="Genua2" | GENUA3="Genua3" | FOCK="Fock" | STORMFOCK="Storm Fock" |
		//
		//	BISTER="Bister" | SPINACKER="Spinacker";
		public EnumRule getRule() { return rule; }

		//NONE="none" | GENUA1="Genua1" | GENUA2="Genua2" | GENUA3="Genua3" | FOCK="Fock" | STORMFOCK="Storm Fock" |
		//
		//BISTER="Bister" | SPINACKER="Spinacker"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE="none"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNONENoneKeyword_0_0() { return cNONENoneKeyword_0_0; }

		//GENUA1="Genua1"
		public EnumLiteralDeclaration getGENUA1EnumLiteralDeclaration_1() { return cGENUA1EnumLiteralDeclaration_1; }

		//"Genua1"
		public Keyword getGENUA1Genua1Keyword_1_0() { return cGENUA1Genua1Keyword_1_0; }

		//GENUA2="Genua2"
		public EnumLiteralDeclaration getGENUA2EnumLiteralDeclaration_2() { return cGENUA2EnumLiteralDeclaration_2; }

		//"Genua2"
		public Keyword getGENUA2Genua2Keyword_2_0() { return cGENUA2Genua2Keyword_2_0; }

		//GENUA3="Genua3"
		public EnumLiteralDeclaration getGENUA3EnumLiteralDeclaration_3() { return cGENUA3EnumLiteralDeclaration_3; }

		//"Genua3"
		public Keyword getGENUA3Genua3Keyword_3_0() { return cGENUA3Genua3Keyword_3_0; }

		//FOCK="Fock"
		public EnumLiteralDeclaration getFOCKEnumLiteralDeclaration_4() { return cFOCKEnumLiteralDeclaration_4; }

		//"Fock"
		public Keyword getFOCKFockKeyword_4_0() { return cFOCKFockKeyword_4_0; }

		//STORMFOCK="Storm Fock"
		public EnumLiteralDeclaration getSTORMFOCKEnumLiteralDeclaration_5() { return cSTORMFOCKEnumLiteralDeclaration_5; }

		//"Storm Fock"
		public Keyword getSTORMFOCKStormFockKeyword_5_0() { return cSTORMFOCKStormFockKeyword_5_0; }

		//BISTER="Bister"
		public EnumLiteralDeclaration getBISTEREnumLiteralDeclaration_6() { return cBISTEREnumLiteralDeclaration_6; }

		//"Bister"
		public Keyword getBISTERBisterKeyword_6_0() { return cBISTERBisterKeyword_6_0; }

		//SPINACKER="Spinacker"
		public EnumLiteralDeclaration getSPINACKEREnumLiteralDeclaration_7() { return cSPINACKEREnumLiteralDeclaration_7; }

		//"Spinacker"
		public Keyword getSPINACKERSpinackerKeyword_7_0() { return cSPINACKERSpinackerKeyword_7_0; }
	}

	public class MainsailElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Mainsail");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENoneKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFULLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFULLFullKeyword_1_0 = (Keyword)cFULLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREEF1EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREEF1Reef1Keyword_2_0 = (Keyword)cREEF1EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREEF2EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREEF2Reef2Keyword_3_0 = (Keyword)cREEF2EnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Mainsail:
		//
		//	NONE="none" | FULL="full" | REEF1="Reef1" | REEF2="Reef2";
		public EnumRule getRule() { return rule; }

		//NONE="none" | FULL="full" | REEF1="Reef1" | REEF2="Reef2"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE="none"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNONENoneKeyword_0_0() { return cNONENoneKeyword_0_0; }

		//FULL="full"
		public EnumLiteralDeclaration getFULLEnumLiteralDeclaration_1() { return cFULLEnumLiteralDeclaration_1; }

		//"full"
		public Keyword getFULLFullKeyword_1_0() { return cFULLFullKeyword_1_0; }

		//REEF1="Reef1"
		public EnumLiteralDeclaration getREEF1EnumLiteralDeclaration_2() { return cREEF1EnumLiteralDeclaration_2; }

		//"Reef1"
		public Keyword getREEF1Reef1Keyword_2_0() { return cREEF1Reef1Keyword_2_0; }

		//REEF2="Reef2"
		public EnumLiteralDeclaration getREEF2EnumLiteralDeclaration_3() { return cREEF2EnumLiteralDeclaration_3; }

		//"Reef2"
		public Keyword getREEF2Reef2Keyword_3_0() { return cREEF2Reef2Keyword_3_0; }
	}
	
	private WaypointElements pWaypoint;
	private ManeuverElements unknownRuleManeuver;
	private ForesailElements unknownRuleForesail;
	private MainsailElements unknownRuleMainsail;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public WaypointGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.htwg.seapal.Waypoint".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Waypoint:
	//
	//	"WAYPOINT" waypoint=STRING position=STRING note=STRING btm=STRING dtm=STRING cog=STRING sog=STRING maneuver=Maneuver
	//
	//	foresail=Foresail mainsail=Mainsail;
	public WaypointElements getWaypointAccess() {
		return (pWaypoint != null) ? pWaypoint : (pWaypoint = new WaypointElements());
	}
	
	public ParserRule getWaypointRule() {
		return getWaypointAccess().getRule();
	}

	//enum Maneuver:
	//
	//	NONE="none" | TACK="Tack" | JIBE="Jibe" | LAYTO="Layto" | SETSAILS="Set Sails" | CHANGESAILS="Change Sails" |
	//
	//	SAILSDOWN="Sails Down" | REFF="Reff" | ANKERUP="Anker Up" | ANKERDOWN="Anker Down";
	public ManeuverElements getManeuverAccess() {
		return (unknownRuleManeuver != null) ? unknownRuleManeuver : (unknownRuleManeuver = new ManeuverElements());
	}
	
	public EnumRule getManeuverRule() {
		return getManeuverAccess().getRule();
	}

	//enum Foresail:
	//
	//	NONE="none" | GENUA1="Genua1" | GENUA2="Genua2" | GENUA3="Genua3" | FOCK="Fock" | STORMFOCK="Storm Fock" |
	//
	//	BISTER="Bister" | SPINACKER="Spinacker";
	public ForesailElements getForesailAccess() {
		return (unknownRuleForesail != null) ? unknownRuleForesail : (unknownRuleForesail = new ForesailElements());
	}
	
	public EnumRule getForesailRule() {
		return getForesailAccess().getRule();
	}

	//enum Mainsail:
	//
	//	NONE="none" | FULL="full" | REEF1="Reef1" | REEF2="Reef2";
	public MainsailElements getMainsailAccess() {
		return (unknownRuleMainsail != null) ? unknownRuleMainsail : (unknownRuleMainsail = new MainsailElements());
	}
	
	public EnumRule getMainsailRule() {
		return getMainsailAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
