/*
* generated by Xtext
*/
grammar InternalWaypoint;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.htwg.seapal.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.htwg.seapal.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.htwg.seapal.services.WaypointGrammarAccess;

}

@parser::members {
 
 	private WaypointGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(WaypointGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleWaypoint
entryRuleWaypoint 
:
{ before(grammarAccess.getWaypointRule()); }
	 ruleWaypoint
{ after(grammarAccess.getWaypointRule()); } 
	 EOF 
;

// Rule Waypoint
ruleWaypoint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWaypointAccess().getGroup()); }
(rule__Waypoint__Group__0)
{ after(grammarAccess.getWaypointAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Maneuver
ruleManeuver
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getManeuverAccess().getAlternatives()); }
(rule__Maneuver__Alternatives)
{ after(grammarAccess.getManeuverAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Foresail
ruleForesail
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForesailAccess().getAlternatives()); }
(rule__Foresail__Alternatives)
{ after(grammarAccess.getForesailAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Mainsail
ruleMainsail
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainsailAccess().getAlternatives()); }
(rule__Mainsail__Alternatives)
{ after(grammarAccess.getMainsailAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Maneuver__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getManeuverAccess().getNONEEnumLiteralDeclaration_0()); }
(	'none' 
)
{ after(grammarAccess.getManeuverAccess().getNONEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getTACKEnumLiteralDeclaration_1()); }
(	'Tack' 
)
{ after(grammarAccess.getManeuverAccess().getTACKEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getJIBEEnumLiteralDeclaration_2()); }
(	'Jibe' 
)
{ after(grammarAccess.getManeuverAccess().getJIBEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getLAYTOEnumLiteralDeclaration_3()); }
(	'Layto' 
)
{ after(grammarAccess.getManeuverAccess().getLAYTOEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getSETSAILSEnumLiteralDeclaration_4()); }
(	'Set Sails' 
)
{ after(grammarAccess.getManeuverAccess().getSETSAILSEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getCHANGESAILSEnumLiteralDeclaration_5()); }
(	'Change Sails' 
)
{ after(grammarAccess.getManeuverAccess().getCHANGESAILSEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getSAILSDOWNEnumLiteralDeclaration_6()); }
(	'Sails Down' 
)
{ after(grammarAccess.getManeuverAccess().getSAILSDOWNEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getREFFEnumLiteralDeclaration_7()); }
(	'Reff' 
)
{ after(grammarAccess.getManeuverAccess().getREFFEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getANKERUPEnumLiteralDeclaration_8()); }
(	'Anker Up' 
)
{ after(grammarAccess.getManeuverAccess().getANKERUPEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getManeuverAccess().getANKERDOWNEnumLiteralDeclaration_9()); }
(	'Anker Down' 
)
{ after(grammarAccess.getManeuverAccess().getANKERDOWNEnumLiteralDeclaration_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foresail__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForesailAccess().getNONEEnumLiteralDeclaration_0()); }
(	'none' 
)
{ after(grammarAccess.getForesailAccess().getNONEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getForesailAccess().getGENUA1EnumLiteralDeclaration_1()); }
(	'Genua1' 
)
{ after(grammarAccess.getForesailAccess().getGENUA1EnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getForesailAccess().getGENUA2EnumLiteralDeclaration_2()); }
(	'Genua2' 
)
{ after(grammarAccess.getForesailAccess().getGENUA2EnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getForesailAccess().getGENUA3EnumLiteralDeclaration_3()); }
(	'Genua3' 
)
{ after(grammarAccess.getForesailAccess().getGENUA3EnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getForesailAccess().getFOCKEnumLiteralDeclaration_4()); }
(	'Fock' 
)
{ after(grammarAccess.getForesailAccess().getFOCKEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getForesailAccess().getSTORMFOCKEnumLiteralDeclaration_5()); }
(	'Storm Fock' 
)
{ after(grammarAccess.getForesailAccess().getSTORMFOCKEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getForesailAccess().getBISTEREnumLiteralDeclaration_6()); }
(	'Bister' 
)
{ after(grammarAccess.getForesailAccess().getBISTEREnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getForesailAccess().getSPINACKEREnumLiteralDeclaration_7()); }
(	'Spinacker' 
)
{ after(grammarAccess.getForesailAccess().getSPINACKEREnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mainsail__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainsailAccess().getNONEEnumLiteralDeclaration_0()); }
(	'none' 
)
{ after(grammarAccess.getMainsailAccess().getNONEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMainsailAccess().getFULLEnumLiteralDeclaration_1()); }
(	'full' 
)
{ after(grammarAccess.getMainsailAccess().getFULLEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMainsailAccess().getREEF1EnumLiteralDeclaration_2()); }
(	'Reef1' 
)
{ after(grammarAccess.getMainsailAccess().getREEF1EnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMainsailAccess().getREEF2EnumLiteralDeclaration_3()); }
(	'Reef2' 
)
{ after(grammarAccess.getMainsailAccess().getREEF2EnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Waypoint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__0__Impl
	rule__Waypoint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getWAYPOINTKeyword_0()); }

	'WAYPOINT' 

{ after(grammarAccess.getWaypointAccess().getWAYPOINTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__1__Impl
	rule__Waypoint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getWaypointAssignment_1()); }
(rule__Waypoint__WaypointAssignment_1)
{ after(grammarAccess.getWaypointAccess().getWaypointAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__2__Impl
	rule__Waypoint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getPositionAssignment_2()); }
(rule__Waypoint__PositionAssignment_2)
{ after(grammarAccess.getWaypointAccess().getPositionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__3__Impl
	rule__Waypoint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getNoteAssignment_3()); }
(rule__Waypoint__NoteAssignment_3)
{ after(grammarAccess.getWaypointAccess().getNoteAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__4__Impl
	rule__Waypoint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getBtmAssignment_4()); }
(rule__Waypoint__BtmAssignment_4)
{ after(grammarAccess.getWaypointAccess().getBtmAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__5__Impl
	rule__Waypoint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getDtmAssignment_5()); }
(rule__Waypoint__DtmAssignment_5)
{ after(grammarAccess.getWaypointAccess().getDtmAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__6__Impl
	rule__Waypoint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getCogAssignment_6()); }
(rule__Waypoint__CogAssignment_6)
{ after(grammarAccess.getWaypointAccess().getCogAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__7__Impl
	rule__Waypoint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getSogAssignment_7()); }
(rule__Waypoint__SogAssignment_7)
{ after(grammarAccess.getWaypointAccess().getSogAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__8__Impl
	rule__Waypoint__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getManeuverAssignment_8()); }
(rule__Waypoint__ManeuverAssignment_8)
{ after(grammarAccess.getWaypointAccess().getManeuverAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__9__Impl
	rule__Waypoint__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getForesailAssignment_9()); }
(rule__Waypoint__ForesailAssignment_9)
{ after(grammarAccess.getWaypointAccess().getForesailAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waypoint__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waypoint__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getMainsailAssignment_10()); }
(rule__Waypoint__MainsailAssignment_10)
{ after(grammarAccess.getWaypointAccess().getMainsailAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

























rule__Waypoint__WaypointAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getWaypointSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getWaypointAccess().getWaypointSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__PositionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getPositionSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getWaypointAccess().getPositionSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__NoteAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getNoteSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getWaypointAccess().getNoteSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__BtmAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getBtmSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getWaypointAccess().getBtmSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__DtmAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getDtmSTRINGTerminalRuleCall_5_0()); }
	RULE_STRING{ after(grammarAccess.getWaypointAccess().getDtmSTRINGTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__CogAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getCogSTRINGTerminalRuleCall_6_0()); }
	RULE_STRING{ after(grammarAccess.getWaypointAccess().getCogSTRINGTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__SogAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getSogSTRINGTerminalRuleCall_7_0()); }
	RULE_STRING{ after(grammarAccess.getWaypointAccess().getSogSTRINGTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__ManeuverAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getManeuverManeuverEnumRuleCall_8_0()); }
	ruleManeuver{ after(grammarAccess.getWaypointAccess().getManeuverManeuverEnumRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__ForesailAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getForesailForesailEnumRuleCall_9_0()); }
	ruleForesail{ after(grammarAccess.getWaypointAccess().getForesailForesailEnumRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waypoint__MainsailAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaypointAccess().getMainsailMainsailEnumRuleCall_10_0()); }
	ruleMainsail{ after(grammarAccess.getWaypointAccess().getMainsailMainsailEnumRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


